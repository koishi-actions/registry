import{Buffer as m}from"https://registry.koishi.chat/modules/buffer/index.js";import y from"https://registry.koishi.chat/modules/process/index.js";import{Adapter as g,camelize as O,pick as I,Schema as c,Time as N,Universal as a}from"https://registry.koishi.chat/modules/@satorijs/core/index.js";import{Bot as _,camelCase as E,h as w,snakeCase as b,Universal as A}from"https://registry.koishi.chat/modules/@satorijs/core/index.js";var v=Object.defineProperty,h=(t,e)=>v(t,"name",{value:e,configurable:!0});function u(t,e){return!t||typeof t!="object"?t:Array.isArray(t)?t.map(s=>u(s,e)):Object.fromEntries(Object.entries(t).map(([s,r])=>s.startsWith("_")?[s,r]:[e(s),u(r,e)]))}h(u,"transformKey");function l(t,e=""){return new Proxy(()=>{},{apply(s,r,o){let i=b(e.slice(1));return t.logger.debug("[request.internal]",i,o),t.http.post("/v1/internal/"+i,o)},get(s,r,o){return typeof r=="symbol"||r in s?Reflect.get(s,r,o):l(t,e+"."+r)}})}h(l,"createInternal");var S=class extends _{static{h(this,"SatoriBot")}http;internal=l(this);constructor(t,e){super(t,e,"satori"),Object.assign(this,e)}};for(let[t,e]of Object.entries(A.Methods))S.prototype[e.name]=async function(...s){let r;if(e.name==="createUpload"){r=new FormData;for(let{data:i,type:p,filename:n}of s)r.append("file",new Blob([i],{type:p}),n)}else{r={};for(let[i,p]of e.fields.entries())if(e.name==="createMessage"&&p.name==="content"){let n=this.session({type:"send",channel:{id:s[0],type:0},...s[3]?.session?.event});if(n.elements=await n.transform(w.normalize(s[i])),await n.app.serial(n,"before-send",n,s[3]??{}))return;r[p.name]=n.elements.join("")}else r[p.name]=u(s[i],b)}this.logger.debug("[request]",t,r);let o=await this.http.post("/v1/"+t,r);return u(o,E)};var f=class extends g.WsClientBase{constructor(t,e){super(t,e),this.ctx=t,this.config=e,this.logger=t.logger("satori"),this.http=t.http.extend({endpoint:e.endpoint,headers:{Authorization:`Bearer ${e.token}`}}),t.on("ready",()=>this.start()),t.on("dispose",()=>this.stop())}static{h(this,"SatoriAdapter")}static schema=!0;static reusable=!0;static inject=["http"];http;logger;_status=a.Status.OFFLINE;sequence;timeout;getActive(){return this._status!==a.Status.OFFLINE&&this._status!==a.Status.DISCONNECT}setStatus(t,e){if(this._status=t,t!==a.Status.ONLINE)for(let s of this.bots)s.status=t,s.error=e}async prepare(){return this.http.ws("/v1/events")}getBot(t,e,s){let r=this.bots.find(o=>o.selfId===e&&o.platform===t);if(r)return s&&r.update(s),this.bots.includes(r)?r:void 0;if(!s){this.logger.error("cannot find bot for",t,e);return}r=new S(this.ctx,s),this.bots.push(r),r.adapter=this,r.http=this.http.extend({headers:{"Satori-Platform":t,"Satori-Login-ID":e,"X-Platform":t,"X-Self-ID":e}}),r.status=s.status}accept(){this.socket.send(JSON.stringify({op:a.Opcode.IDENTIFY,body:{token:this.config.token,sequence:this.sequence}})),this.timeout=setInterval(()=>{this.socket.send(JSON.stringify({op:a.Opcode.PING,body:{}}))},N.second*10),this.socket.addEventListener("message",async({data:t})=>{let e;t=t.toString();try{e=u(JSON.parse(t),O)}catch{return this.logger.warn("cannot parse message",t)}if(e.op===a.Opcode.READY){this.logger.debug("ready");for(let s of e.body.logins)this.getBot(s.platform,s.user.id,s)}if(e.op===a.Opcode.EVENT){let{id:s,type:r,login:o,selfId:i=o?.user.id,platform:p=o?.platform}=e.body;this.sequence=s;let n=this.getBot(p,i,r==="login-added"&&o);if(!n)return;if(r==="login-updated")return n.update(o);if(r==="login-removed")return n.dispose();let d=n.session(e.body);typeof e.body.message?.content=="string"&&(d.content=e.body.message.content),e.body._type&&e.body.type!=="internal"&&d.setInternal(e.body._type,e.body._data),n.dispatch(d),r==="message-created"&&d.userId===i&&d.app.emit(d,"send",d)}}),this.socket.addEventListener("close",()=>{clearInterval(this.timeout)}),this.ctx.satori.upload(()=>this.bots.flatMap(t=>t.proxyUrls).filter(t=>t.startsWith("upload://")).map(t=>t.replace("upload://","")),async t=>{t=t.replace(/^\//g,"");let e=await this.http("/v1/proxy/upload://"+t,{responseType:"arraybuffer"});return I(e,["status","data","headers","statusText"])})}async start(){this.setStatus(a.Status.CONNECT),await super.start()}async stop(){this.setStatus(a.Status.DISCONNECT),await super.stop()}};(t=>{t.Config=c.intersect([c.object({endpoint:c.string().description("API 终结点。").required(),token:c.string().description("API 访问令牌。")}),g.WsClientConfig])})(f||(f={}));var k=f;export{f as SatoriAdapter,S as SatoriBot,k as default,u as transformKey};
