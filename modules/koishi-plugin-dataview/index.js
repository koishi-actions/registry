import{Buffer as f}from"https://registry.koishi.chat/modules/buffer/index.js";import b from"https://registry.koishi.chat/modules/process/index.js";import{clone as h,Field as u,makeArray as y,Schema as m}from"https://registry.koishi.chat/modules/koishi/index.js";import{DataService as O}from"https://registry.koishi.chat/modules/@koishijs/console/index.js";import"https://registry.koishi.chat/modules/@cordiverse/path/index.js";import{Binary as c}from"https://registry.koishi.chat/modules/koishi/index.js";var p=Object.defineProperty,n=(t,r)=>p(t,"name",{value:r,configurable:!0});function d(t){return c.is(t)?`"b${t.byteLength}"`:t instanceof Date?`"d${t.toJSON()}"`:JSON.stringify(t,(r,e)=>{if(c.is(e))return`b${e.byteLength}`;if(typeof e=="string")return"s"+e;if(typeof e=="object"){if(e instanceof Date)return"d"+new Date(e).toJSON();if(e===null)return null;let s=Array.isArray(e)?[]:{};for(let i in e)e[i]instanceof Date?(s[i]=new Date(e[i]),s[i].toJSON=void 0):s[i]=e[i];return s}return e})}n(d,"serialize");function l(t){if(t!==void 0)return JSON.parse(t,(r,e)=>typeof e=="string"?e[0]==="s"?e.slice(1):e[0]==="b"?void 0:new Date(e.slice(1)):e)}n(l,"deserialize");var o=class extends O{static{n(this,"DatabaseProvider")}static filter=!1;static inject=["console","database"];task;addListener(t,r=!1){this.ctx.console.addListener(`database/${t}`,async(...e)=>{let s=e.map(l);if(["set","remove"].includes(t)){let a=(await this.get()).tables[s[0]];a.HookObjectId&&(s[1][a.primary[0]]=new a.HookObjectId(s[1][a.primary[0]]))}let i=await this.ctx.database[t](...s);return r&&this.refresh(),i===void 0?i:d(i)},{authority:4})}constructor(t){super(t,"database",{authority:4}),t.console.addEntry(["https://registry.koishi.chat/modules/koishi-plugin-dataview/dist/index.js","https://registry.koishi.chat/modules/koishi-plugin-dataview/dist/style.css"]),this.addListener("create",!0),this.addListener("eval",!0),this.addListener("get"),this.addListener("remove",!0),this.addListener("set"),this.addListener("stats",!0),this.addListener("upsert",!0);let r=t.throttle(()=>this.refresh(),500);t.on("model",()=>r())}async getInfo(){let t=await this.ctx.database.stats(),r={tables:{},...t},e=r.tables;return r.tables={},await Promise.all(Object.keys(this.ctx.model.tables).map(async s=>{r.tables[s]={...h(this.ctx.model.tables[s]),...e[s]},r.tables[s].primary=y(r.tables[s].primary);for(let[i,a]of Object.entries(r.tables[s].fields))u.available(a)||delete r.tables[s].fields[i];if(r.tables[s].fields[r.tables[s].primary[0]]?.type?.type==="primary"&&["mongo","MongoDriver"].includes(Object.values(this.ctx.database.drivers)[0].constructor.name)){let i=await this.ctx.database.select(s).limit(1).execute();r.tables[s].HookObjectId=i[0]?.[r.tables[s].primary[0]]?.constructor}})),r.tables=Object.fromEntries(Object.entries(r.tables).sort(([s],[i])=>s.localeCompare(i))),r}get(t=!1){return t&&delete this.task,this.task||=this.getInfo()}};(t=>{t.Config=m.object({})})(o||(o={}));var D=o;export{D as default,l as deserialize,d as serialize};
