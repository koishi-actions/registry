var p=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var h=Object.prototype.hasOwnProperty;var m=(e,s)=>()=>(e&&(s=e(e=0)),s);var f=(e,s)=>()=>(s||e((s={exports:{}}).exports,s),s.exports);var c=(e,s,i,n)=>{if(s&&typeof s=="object"||typeof s=="function")for(let t of x(s))!h.call(e,t)&&t!==i&&p(e,t,{get:()=>s[t],enumerable:!(n=l(s,t))||n.enumerable});return e},a=(e,s,i)=>(c(e,s,"default"),i&&c(i,s,"default"));var d=e=>c(p({},"__esModule",{value:!0}),e);import{Buffer}from"https://registry.koishi.chat/modules/buffer/index.js";import process from"https://registry.koishi.chat/modules/process/index.js";var o=m(()=>{});var r={};import*as b from"https://registry.koishi.chat/modules/koishi/index.js";var u=m(()=>{o();a(r,b)});var y=f((exports,module)=>{o();Object.defineProperty(exports,"__esModule",{value:!0});exports.apply=exports.schema=exports.Rule=exports.usage=exports.name=void 0;var koishi_1=(u(),d(r));exports.name="simplecmd";exports.usage=`
## 使用说明
express配置开启后，match为正则表达式模式，此时match里面就是正则表达式;  
举例：匹配聊天内容含有awa(忽略大小写)  
eg. /awa/gi  
## 正则表达式教程
[Runoob教程-正则表达式](https://www.runoob.com/regexp/regexp-syntax.html)
`;exports.Rule=koishi_1.Schema.object({express:koishi_1.Schema.boolean().description("match启用正则表达式?").default(!1),match:koishi_1.Schema.string().description("要匹配的输入。").required(),execute:koishi_1.Schema.array(String).description("要执行的命令。").required(),miniInterval:koishi_1.Schema.number().description("每条指令的触发时间(ms)").default(500)});exports.schema=koishi_1.Schema.object({rules:koishi_1.Schema.array(exports.Rule).description("指令简化")});function apply(ctx,cfg){ctx.on("message",async session=>{for(let rule of cfg.rules)if(rule.express){var exp=eval(rule.match);if(session.content.match(exp))for(let e of rule.execute)session.execute(e),await delay(rule.miniInterval)}else if(session.content==rule.match)for(let e of rule.execute)session.execute(e),await delay(rule.miniInterval)})}exports.apply=apply;function delay(e){return new Promise(s=>setTimeout(s,e))}});export default y();
